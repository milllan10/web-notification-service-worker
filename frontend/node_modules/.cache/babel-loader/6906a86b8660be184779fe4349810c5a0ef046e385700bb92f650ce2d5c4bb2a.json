{"ast":null,"code":"var _jsxFileName = \"/home/uni5/web-notification-id/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n\n// Function to convert the VAPID key to Uint8Array\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlBase64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nconst App = () => {\n  _s();\n  useEffect(() => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        // Subscribe to push notifications here\n        subscribeToPushNotifications(registration, 'user-123'); // Replace 'user-123' with your unique user ID\n      }).catch(err => console.error('Service Worker registration failed', err));\n    }\n  }, []);\n\n  // Function to subscribe to push notifications\n  const subscribeToPushNotifications = async (registration, userId) => {\n    try {\n      const applicationServerKey = urlBase64ToUint8Array('BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'); // Replace with your actual public key\n\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n      });\n\n      // Send subscription to the backend\n      const response = await fetch('http://localhost:5000/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscription,\n          userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to subscribe: ${response.statusText}`);\n      }\n      console.log('Subscription successful!');\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  };\n\n  // Function to send a push notification to a specific user\n  const sendNotificationToUser = async () => {\n    const userId = 'user-123'; // Replace with the actual user ID\n    const title = 'New Notification!';\n    const message = 'You have a new push notification!';\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-user', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          title,\n          message\n        })\n      });\n      if (response.ok) {\n        console.log('Notification sent successfully');\n      } else {\n        console.error('Failed to send notification:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notification:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Web Push Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendNotificationToUser,\n      children: \"Send Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","App","_s","navigator","window","serviceWorker","register","then","registration","subscribeToPushNotifications","catch","err","console","error","userId","applicationServerKey","subscription","pushManager","subscribe","userVisibleOnly","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","log","sendNotificationToUser","title","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/uni5/web-notification-id/frontend/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\n// Function to convert the VAPID key to Uint8Array\nconst urlBase64ToUint8Array = (base64String) => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\n\nconst App = () => {\n  useEffect(() => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then((registration) => {\n          // Subscribe to push notifications here\n          subscribeToPushNotifications(registration, 'user-123'); // Replace 'user-123' with your unique user ID\n        })\n        .catch(err => console.error('Service Worker registration failed', err));\n    }\n  }, []);\n\n  // Function to subscribe to push notifications\n  const subscribeToPushNotifications = async (registration, userId) => {\n    try {\n      const applicationServerKey = urlBase64ToUint8Array('BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'); // Replace with your actual public key\n\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey,\n      });\n\n      // Send subscription to the backend\n      const response = await fetch('http://localhost:5000/subscribe', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ subscription, userId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to subscribe: ${response.statusText}`);\n      }\n\n      console.log('Subscription successful!');\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  };\n\n  // Function to send a push notification to a specific user\n  const sendNotificationToUser = async () => {\n    const userId = 'user-123'; // Replace with the actual user ID\n    const title = 'New Notification!';\n    const message = 'You have a new push notification!';\n\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-user', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId, title, message }),\n      });\n\n      if (response.ok) {\n        console.log('Notification sent successfully');\n      } else {\n        console.error('Failed to send notification:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notification:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>React Web Push Notification</h1>\n      <button onClick={sendNotificationToUser}>Send Notification</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}