{"ast":null,"code":"var _jsxFileName = \"/home/uni5/web-notification-id/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const publicVapidKey = 'BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'; // Same key as in backend\n\n  // Request permission for push notifications\n  const requestNotificationPermission = async () => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Permission granted for notifications');\n      subscribeToPushNotifications();\n    } else {\n      console.error('Permission denied for notifications');\n    }\n  };\n\n  // Subscribe user to push notifications\n  const subscribeToPushNotifications = async () => {\n    try {\n      const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n      const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n      });\n      const subscription = {\n        endpoint: pushSubscription.endpoint,\n        keys: {\n          p256dh: pushSubscription.getKey('p256dh'),\n          auth: pushSubscription.getKey('auth')\n        }\n      };\n\n      // Convert the keys (Uint8Array) to base64 strings and log\n      const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n      const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n      console.log(\"p256dh:\", p256dhBase64);\n      console.log(\"auth:\", authBase64);\n      const userId = uuidv4(); // You can dynamically generate user ID or retrieve it from app state\n\n      // Send the subscription to the backend\n      await fetch('http://localhost:5000/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscription,\n          userId\n        })\n      });\n      setIsSubscribed(true); // Update state to reflect the subscription status\n      console.log('User subscribed:', userId);\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  };\n\n  // Button click handler to request notifications\n  const handleSubscribeButtonClick = () => {\n    requestNotificationPermission();\n  };\n\n  // Send notification to all users\n  const handleSendNotificationButtonClick = async () => {\n    const title = 'New Notification';\n    const message = 'You have a new notification!';\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          message\n        })\n      });\n      if (response.ok) {\n        console.log('Notifications sent successfully');\n      } else {\n        console.error('Failed to send notifications:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isSubscribed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubscribeButtonClick,\n      children: \"Subscribe to Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are subscribed to notifications!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendNotificationButtonClick,\n        children: \"Send Notification to All Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"u7ts92eeZ8YtPu0ix0ZCMZj0B6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","isSubscribed","setIsSubscribed","useState","publicVapidKey","requestNotificationPermission","permission","Notification","requestPermission","console","log","subscribeToPushNotifications","error","serviceWorkerRegistration","navigator","serviceWorker","ready","pushSubscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","subscription","endpoint","keys","p256dh","getKey","auth","p256dhBase64","btoa","String","fromCharCode","Uint8Array","authBase64","userId","uuidv4","fetch","method","headers","body","JSON","stringify","handleSubscribeButtonClick","handleSendNotificationButtonClick","title","message","response","ok","statusText","_jsxDEV","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/uni5/web-notification-id/frontend/src/App.js"],"sourcesContent":["const App = () => {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const publicVapidKey = 'BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'; // Same key as in backend\n\n  // Request permission for push notifications\n  const requestNotificationPermission = async () => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Permission granted for notifications');\n      subscribeToPushNotifications();\n    } else {\n      console.error('Permission denied for notifications');\n    }\n  };\n\n  // Subscribe user to push notifications\n  const subscribeToPushNotifications = async () => {\n    try {\n      const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n      const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n      });\n\n      const subscription = {\n        endpoint: pushSubscription.endpoint,\n        keys: {\n          p256dh: pushSubscription.getKey('p256dh'),\n          auth: pushSubscription.getKey('auth'),\n        },\n      };\n\n      // Convert the keys (Uint8Array) to base64 strings and log\n      const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n      const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n\n      console.log(\"p256dh:\", p256dhBase64);\n      console.log(\"auth:\", authBase64);\n\n      const userId = uuidv4(); // You can dynamically generate user ID or retrieve it from app state\n\n      // Send the subscription to the backend\n      await fetch('http://localhost:5000/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscription,\n          userId,\n        }),\n      });\n\n      setIsSubscribed(true); // Update state to reflect the subscription status\n      console.log('User subscribed:', userId);\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n    }\n  };\n\n  // Button click handler to request notifications\n  const handleSubscribeButtonClick = () => {\n    requestNotificationPermission();\n  };\n\n  // Send notification to all users\n  const handleSendNotificationButtonClick = async () => {\n    const title = 'New Notification';\n    const message = 'You have a new notification!';\n\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title, message }),\n      });\n\n      if (response.ok) {\n        console.log('Notifications sent successfully');\n      } else {\n        console.error('Failed to send notifications:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n    }\n  };\n\n  return (\n    <div>\n      {!isSubscribed ? (\n        <button onClick={handleSubscribeButtonClick}>Subscribe to Notifications</button>\n      ) : (\n        <div>\n          <p>You are subscribed to notifications!</p>\n          <button onClick={handleSendNotificationButtonClick}>\n            Send Notification to All Users\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}