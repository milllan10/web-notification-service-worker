{"ast":null,"code":"var _jsxFileName = \"/home/uni5/web-notification-id/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Convert the public VAPID key to Uint8Array\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\nconst App = () => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const publicVapidKey = 'BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'; // Same key as in backend\n\n  useEffect(() => {\n    // Check if user is already subscribed by checking localStorage\n    const userId = localStorage.getItem('userId');\n    const p256dh = localStorage.getItem('p256dh');\n    const auth = localStorage.getItem('auth');\n    if (userId && p256dh && auth) {\n      setIsSubscribed(true); // User is already subscribed\n    }\n  }, []);\n\n  // Request permission for push notifications\n  const requestNotificationPermission = async () => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Permission granted for notifications');\n      subscribeToPushNotifications();\n    } else {\n      console.error('Permission denied for notifications');\n    }\n  };\n\n  // Subscribe user to push notifications\n  const subscribeToPushNotifications = async () => {\n    // Wait for service worker registration\n    const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n\n    // Subscribe the user to push notifications\n    const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n    });\n\n    // The subscription object\n    const subscription = {\n      endpoint: pushSubscription.endpoint,\n      keys: {\n        p256dh: pushSubscription.getKey('p256dh'),\n        auth: pushSubscription.getKey('auth')\n      }\n    };\n\n    // Log the subscription details to the console, including the endpoint\n    console.log('Subscription:', subscription);\n    console.log('Endpoint:', pushSubscription.endpoint);\n    console.log('P256dh Key:', pushSubscription.getKey('p256dh'));\n    console.log('Auth Key:', pushSubscription.getKey('auth'));\n\n    // Base64 encode the p256dh and auth keys\n    const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n    const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n    console.log(\"p256dh:\", p256dhBase64);\n    console.log(\"auth:\", authBase64);\n\n    // Generate a user ID (you can dynamically generate this or retrieve it from the app state)\n    const userId = uuidv4();\n\n    // Save the subscription details in localStorage\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('p256dh', p256dhBase64);\n    localStorage.setItem('auth', authBase64);\n    localStorage.setItem('endpoint', subscription.endpoint);\n\n    // Send this subscription data to your backend\n    await fetch('http://localhost:5000/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        subscription,\n        userId\n      })\n    });\n  };\n\n  // Button click handler to request notifications\n  const handleSubscribeButtonClick = () => {\n    requestNotificationPermission();\n  };\n\n  // Send notification to all users\n  const handleSendNotificationButtonClick = async () => {\n    const title = 'New Notification';\n    const message = 'You have a new notification!';\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          message\n        })\n      });\n      if (response.ok) {\n        console.log('Notifications sent successfully');\n      } else {\n        console.error('Failed to send notifications:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isSubscribed ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubscribeButtonClick,\n      children: \"Subscribe to Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are subscribed to notifications!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendNotificationButtonClick,\n        children: \"Send Notification to All Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jwzY2fryZMdGFxBHusGG+zxQIDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","v4","uuidv4","jsxDEV","_jsxDEV","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","App","_s","isSubscribed","setIsSubscribed","publicVapidKey","userId","localStorage","getItem","p256dh","auth","requestNotificationPermission","permission","Notification","requestPermission","console","log","subscribeToPushNotifications","error","serviceWorkerRegistration","navigator","serviceWorker","ready","pushSubscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","endpoint","keys","getKey","p256dhBase64","btoa","String","fromCharCode","authBase64","setItem","fetch","method","headers","body","JSON","stringify","handleSubscribeButtonClick","handleSendNotificationButtonClick","title","message","response","ok","statusText","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/uni5/web-notification-id/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Convert the public VAPID key to Uint8Array\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nconst App = () => {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const publicVapidKey = 'BIOOXS25u5s7CIKwFvWHTf-k9tJn3aQKVp3vbJRu_lQ1Vk_rsKfHyAXnvkRgkU92eCO8mZ-Z8qyZ_H3oqw3fY5U'; // Same key as in backend\n\n  useEffect(() => {\n    // Check if user is already subscribed by checking localStorage\n    const userId = localStorage.getItem('userId');\n    const p256dh = localStorage.getItem('p256dh');\n    const auth = localStorage.getItem('auth');\n\n    if (userId && p256dh && auth) {\n      setIsSubscribed(true); // User is already subscribed\n    }\n  }, []);\n\n  // Request permission for push notifications\n  const requestNotificationPermission = async () => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Permission granted for notifications');\n      subscribeToPushNotifications();\n    } else {\n      console.error('Permission denied for notifications');\n    }\n  };\n\n  // Subscribe user to push notifications\n  const subscribeToPushNotifications = async () => {\n    // Wait for service worker registration\n    const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n  \n    // Subscribe the user to push notifications\n    const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n    });\n  \n    // The subscription object\n    const subscription = {\n      endpoint: pushSubscription.endpoint,\n      keys: {\n        p256dh: pushSubscription.getKey('p256dh'),\n        auth: pushSubscription.getKey('auth'),\n      },\n    };\n  \n    // Log the subscription details to the console, including the endpoint\n    console.log('Subscription:', subscription);\n    console.log('Endpoint:', pushSubscription.endpoint);\n    console.log('P256dh Key:', pushSubscription.getKey('p256dh'));\n    console.log('Auth Key:', pushSubscription.getKey('auth'));\n  \n    // Base64 encode the p256dh and auth keys\n    const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n    const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n  \n    console.log(\"p256dh:\", p256dhBase64);\n    console.log(\"auth:\", authBase64);\n  \n    // Generate a user ID (you can dynamically generate this or retrieve it from the app state)\n    const userId = uuidv4();\n  \n    // Save the subscription details in localStorage\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('p256dh', p256dhBase64);\n    localStorage.setItem('auth', authBase64);\n    localStorage.setItem('endpoint', subscription.endpoint);\n  \n    // Send this subscription data to your backend\n    await fetch('http://localhost:5000/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        subscription,\n        userId,\n      }),\n    });\n  };\n  \n\n  // Button click handler to request notifications\n  const handleSubscribeButtonClick = () => {\n    requestNotificationPermission();\n  };\n\n  // Send notification to all users\n  const handleSendNotificationButtonClick = async () => {\n    const title = 'New Notification';\n    const message = 'You have a new notification!';\n\n    try {\n      const response = await fetch('http://localhost:5000/send-notification-to-all', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title, message }),\n      });\n\n      if (response.ok) {\n        console.log('Notifications sent successfully');\n      } else {\n        console.error('Failed to send notifications:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n    }\n  };\n\n  return (\n    <div>\n      {!isSubscribed ? (\n        <button onClick={handleSubscribeButtonClick}>Subscribe to Notifications</button>\n      ) : null}\n      <div>\n          <p>You are subscribed to notifications!</p>\n          <button onClick={handleSendNotificationButtonClick}>\n            Send Notification to All Users\n          </button>\n        </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}