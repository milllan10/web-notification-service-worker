{"ast":null,"code":"var _jsxFileName = \"/home/uni5/web-notification-id/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    let userId = localStorage.getItem('userId');\n    if (!userId) {\n      userId = uuidv4(); // Generate a unique user ID if not already stored\n      localStorage.setItem('userId', userId);\n    }\n\n    // Register service worker and request notification permission\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        console.log('Service Worker registered:', registration);\n        requestNotificationPermission(registration, userId);\n      }).catch(error => console.error('Service Worker registration failed:', error));\n    }\n  }, []);\n  const requestNotificationPermission = async (registration, userId) => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Notification permission granted');\n      subscribeToPushNotifications(registration, userId);\n    }\n  };\n  const subscribeToPushNotifications = async (registration, userId) => {\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: 'your-public-key' // Replace with your public VAPID key\n    });\n\n    // Send subscription and userId to backend\n    await fetch('http://localhost:5000/subscribe', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        subscription,\n        userId\n      })\n    });\n  };\n  const sendNotification = () => {\n    fetch('http://localhost:5000/send-notification', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: 'Test Notification',\n        message: 'This is a test push notification'\n      })\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Web Push Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendNotification,\n      children: \"Send Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","userId","localStorage","getItem","setItem","navigator","window","serviceWorker","register","then","registration","console","log","requestNotificationPermission","catch","error","permission","Notification","requestPermission","subscribeToPushNotifications","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","fetch","method","headers","body","JSON","stringify","sendNotification","title","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/uni5/web-notification-id/frontend/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  useEffect(() => {\n    let userId = localStorage.getItem('userId');\n    if (!userId) {\n      userId = uuidv4(); // Generate a unique user ID if not already stored\n      localStorage.setItem('userId', userId);\n    }\n\n    // Register service worker and request notification permission\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then((registration) => {\n          console.log('Service Worker registered:', registration);\n          requestNotificationPermission(registration, userId);\n        })\n        .catch((error) => console.error('Service Worker registration failed:', error));\n    }\n  }, []);\n\n  const requestNotificationPermission = async (registration, userId) => {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      console.log('Notification permission granted');\n      subscribeToPushNotifications(registration, userId);\n    }\n  };\n\n  const subscribeToPushNotifications = async (registration, userId) => {\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: 'your-public-key', // Replace with your public VAPID key\n    });\n\n    // Send subscription and userId to backend\n    await fetch('http://localhost:5000/subscribe', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ subscription, userId }),\n    });\n  };\n\n  const sendNotification = () => {\n    fetch('http://localhost:5000/send-notification', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        title: 'Test Notification',\n        message: 'This is a test push notification',\n      }),\n    });\n  };\n\n  return (\n    <div>\n      <h1>Web Push Notifications</h1>\n      <button onClick={sendNotification}>Send Notification</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBN,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC3C,IAAI,CAACF,MAAM,EAAE;MACXA,MAAM,GAAGL,MAAM,CAAC,CAAC,CAAC,CAAC;MACnBM,YAAY,CAACE,OAAO,CAAC,QAAQ,EAAEH,MAAM,CAAC;IACxC;;IAEA;IACA,IAAI,eAAe,IAAII,SAAS,IAAI,aAAa,IAAIC,MAAM,EAAE;MAC3DD,SAAS,CAACE,aAAa,CAACC,QAAQ,CAAC,oBAAoB,CAAC,CACnDC,IAAI,CAAEC,YAAY,IAAK;QACtBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,YAAY,CAAC;QACvDG,6BAA6B,CAACH,YAAY,EAAET,MAAM,CAAC;MACrD,CAAC,CAAC,CACDa,KAAK,CAAEC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC,CAAC;IAClF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMF,6BAA6B,GAAG,MAAAA,CAAOH,YAAY,EAAET,MAAM,KAAK;IACpE,MAAMe,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;IACzD,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC5BL,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CO,4BAA4B,CAACT,YAAY,EAAET,MAAM,CAAC;IACpD;EACF,CAAC;EAED,MAAMkB,4BAA4B,GAAG,MAAAA,CAAOT,YAAY,EAAET,MAAM,KAAK;IACnE,MAAMmB,YAAY,GAAG,MAAMV,YAAY,CAACW,WAAW,CAACC,SAAS,CAAC;MAC5DC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAE,iBAAiB,CAAE;IAC3C,CAAC,CAAC;;IAEF;IACA,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,YAAY;QAAEnB;MAAO,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED,MAAM8B,gBAAgB,GAAGA,CAAA,KAAM;IAC7BN,KAAK,CAAC,yCAAyC,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBE,KAAK,EAAE,mBAAmB;QAC1BC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,oBACEnC,OAAA;IAAAoC,QAAA,gBACEpC,OAAA;MAAAoC,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BxC,OAAA;MAAQyC,OAAO,EAAER,gBAAiB;MAAAG,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAACtC,EAAA,CA1DID,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AA4DT,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}