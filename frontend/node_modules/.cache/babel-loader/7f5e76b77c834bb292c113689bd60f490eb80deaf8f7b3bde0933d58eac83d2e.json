{"ast":null,"code":"// serviceWorkerRegistration.js\n\n// Check if service workers are supported by the browser\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname === '127.0.0.1');\nexport function register() {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = isLocalhost ? '/service-worker.js' : 'service-worker.js'; // Path to the service worker\n\n      // Register service worker\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        console.log('Service Worker registered with scope: ', registration.scope);\n      }).catch(error => {\n        console.error('Service Worker registration failed: ', error);\n      });\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error('Error during service worker unregistration:', error);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","register","navigator","addEventListener","swUrl","serviceWorker","then","registration","console","log","scope","catch","error","unregister","ready"],"sources":["/home/uni5/web-notification-id/frontend/src/serviceWorkerRegistration.js"],"sourcesContent":["// serviceWorkerRegistration.js\n\n// Check if service workers are supported by the browser\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      window.location.hostname === '[::1]' ||\n      window.location.hostname === '127.0.0.1'\n  );\n  \n  export function register() {\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        const swUrl = isLocalhost\n          ? '/service-worker.js'\n          : 'service-worker.js'; // Path to the service worker\n  \n        // Register service worker\n        navigator.serviceWorker\n          .register(swUrl)\n          .then((registration) => {\n            console.log('Service Worker registered with scope: ', registration.scope);\n          })\n          .catch((error) => {\n            console.error('Service Worker registration failed: ', error);\n          });\n      });\n    }\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error('Error during service worker unregistration:', error);\n        });\n    }\n  }\n  "],"mappings":"AAAA;;AAEA;AACA,MAAMA,WAAW,GAAGC,OAAO,CACvBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACtCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WACjC,CAAC;AAED,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,IAAI,eAAe,IAAIC,SAAS,EAAE;IAChCJ,MAAM,CAACK,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACpC,MAAMC,KAAK,GAAGR,WAAW,GACrB,oBAAoB,GACpB,mBAAmB,CAAC,CAAC;;MAEzB;MACAM,SAAS,CAACG,aAAa,CACpBJ,QAAQ,CAACG,KAAK,CAAC,CACfE,IAAI,CAAEC,YAAY,IAAK;QACtBC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEF,YAAY,CAACG,KAAK,CAAC;MAC3E,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBJ,OAAO,CAACI,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAIX,SAAS,EAAE;IAChCA,SAAS,CAACG,aAAa,CAACS,KAAK,CAC1BR,IAAI,CAAEC,YAAY,IAAK;MACtBA,YAAY,CAACM,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDF,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACrE,CAAC,CAAC;EACN;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}