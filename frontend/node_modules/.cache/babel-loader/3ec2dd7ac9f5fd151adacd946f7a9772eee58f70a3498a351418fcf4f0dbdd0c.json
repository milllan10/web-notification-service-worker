{"ast":null,"code":"const subscribeToPushNotifications = async () => {\n  // Wait for service worker registration\n  const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n\n  // Subscribe the user to push notifications\n  const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n  });\n\n  // The subscription object\n  const subscription = {\n    endpoint: pushSubscription.endpoint,\n    keys: {\n      p256dh: pushSubscription.getKey('p256dh'),\n      auth: pushSubscription.getKey('auth')\n    }\n  };\n\n  // Log the subscription details to the console, including the endpoint\n  console.log('Subscription:', subscription);\n  console.log('Endpoint:', pushSubscription.endpoint);\n  console.log('P256dh Key:', pushSubscription.getKey('p256dh'));\n  console.log('Auth Key:', pushSubscription.getKey('auth'));\n\n  // Base64 encode the p256dh and auth keys\n  const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n  const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n  console.log(\"p256dh:\", p256dhBase64);\n  console.log(\"auth:\", authBase64);\n\n  // Generate a user ID (you can dynamically generate this or retrieve it from the app state)\n  const userId = uuidv4();\n\n  // Save the subscription details in localStorage\n  localStorage.setItem('userId', userId);\n  localStorage.setItem('p256dh', p256dhBase64);\n  localStorage.setItem('auth', authBase64);\n  localStorage.setItem('endpoint', subscription.endpoint);\n\n  // Send this subscription data to your backend\n  await fetch('http://localhost:5000/subscribe', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      subscription,\n      userId\n    })\n  });\n};","map":{"version":3,"names":["subscribeToPushNotifications","serviceWorkerRegistration","navigator","serviceWorker","ready","pushSubscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","publicVapidKey","subscription","endpoint","keys","p256dh","getKey","auth","console","log","p256dhBase64","btoa","String","fromCharCode","Uint8Array","authBase64","userId","uuidv4","localStorage","setItem","fetch","method","headers","body","JSON","stringify"],"sources":["/home/uni5/web-notification-id/frontend/src/App.js"],"sourcesContent":["const subscribeToPushNotifications = async () => {\n  // Wait for service worker registration\n  const serviceWorkerRegistration = await navigator.serviceWorker.ready;\n\n  // Subscribe the user to push notifications\n  const pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n  });\n\n  // The subscription object\n  const subscription = {\n    endpoint: pushSubscription.endpoint,\n    keys: {\n      p256dh: pushSubscription.getKey('p256dh'),\n      auth: pushSubscription.getKey('auth'),\n    },\n  };\n\n  // Log the subscription details to the console, including the endpoint\n  console.log('Subscription:', subscription);\n  console.log('Endpoint:', pushSubscription.endpoint);\n  console.log('P256dh Key:', pushSubscription.getKey('p256dh'));\n  console.log('Auth Key:', pushSubscription.getKey('auth'));\n\n  // Base64 encode the p256dh and auth keys\n  const p256dhBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.p256dh)));\n  const authBase64 = btoa(String.fromCharCode(...new Uint8Array(subscription.keys.auth)));\n\n  console.log(\"p256dh:\", p256dhBase64);\n  console.log(\"auth:\", authBase64);\n\n  // Generate a user ID (you can dynamically generate this or retrieve it from the app state)\n  const userId = uuidv4();\n\n  // Save the subscription details in localStorage\n  localStorage.setItem('userId', userId);\n  localStorage.setItem('p256dh', p256dhBase64);\n  localStorage.setItem('auth', authBase64);\n  localStorage.setItem('endpoint', subscription.endpoint);\n\n  // Send this subscription data to your backend\n  await fetch('http://localhost:5000/subscribe', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      subscription,\n      userId,\n    }),\n  });\n};\n"],"mappings":"AAAA,MAAMA,4BAA4B,GAAG,MAAAA,CAAA,KAAY;EAC/C;EACA,MAAMC,yBAAyB,GAAG,MAAMC,SAAS,CAACC,aAAa,CAACC,KAAK;;EAErE;EACA,MAAMC,gBAAgB,GAAG,MAAMJ,yBAAyB,CAACK,WAAW,CAACC,SAAS,CAAC;IAC7EC,eAAe,EAAE,IAAI;IACrBC,oBAAoB,EAAEC,qBAAqB,CAACC,cAAc;EAC5D,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAER,gBAAgB,CAACQ,QAAQ;IACnCC,IAAI,EAAE;MACJC,MAAM,EAAEV,gBAAgB,CAACW,MAAM,CAAC,QAAQ,CAAC;MACzCC,IAAI,EAAEZ,gBAAgB,CAACW,MAAM,CAAC,MAAM;IACtC;EACF,CAAC;;EAED;EACAE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,YAAY,CAAC;EAC1CM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEd,gBAAgB,CAACQ,QAAQ,CAAC;EACnDK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEd,gBAAgB,CAACW,MAAM,CAAC,QAAQ,CAAC,CAAC;EAC7DE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEd,gBAAgB,CAACW,MAAM,CAAC,MAAM,CAAC,CAAC;;EAEzD;EACA,MAAMI,YAAY,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAIC,UAAU,CAACZ,YAAY,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC3F,MAAMU,UAAU,GAAGJ,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAIC,UAAU,CAACZ,YAAY,CAACE,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;EAEvFC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEC,YAAY,CAAC;EACpCF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEM,UAAU,CAAC;;EAEhC;EACA,MAAMC,MAAM,GAAGC,MAAM,CAAC,CAAC;;EAEvB;EACAC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,MAAM,CAAC;EACtCE,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAET,YAAY,CAAC;EAC5CQ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,UAAU,CAAC;EACxCG,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEjB,YAAY,CAACC,QAAQ,CAAC;;EAEvD;EACA,MAAMiB,KAAK,CAAC,iCAAiC,EAAE;IAC7CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBvB,YAAY;MACZc;IACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}